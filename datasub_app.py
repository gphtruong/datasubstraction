import cv2
import numpy as np
import streamlit as st

st.set_page_config(page_title="T√°ch n·ªÅn & Gh√©p ·∫£nh", layout="centered")
st.title("üì∏ T√°ch n·ªÅn & Gh√©p v·∫≠t th·ªÉ v√†o n·ªÅn")

# === Upload ·∫£nh
st.subheader("üì§ T·∫£i ·∫£nh l√™n")
bg_file = st.file_uploader("·∫¢nh n·ªÅn (background)", type=["jpg", "jpeg", "png"])
cur_file = st.file_uploader("·∫¢nh c√≥ v·∫≠t th·ªÉ (current)", type=["jpg", "jpeg", "png"])

# === Khi c√≥ c·∫£ 2 ·∫£nh
if bg_file and cur_file:
    try:
        # ƒê·ªçc ·∫£nh t·ª´ file buffer
        bg_bytes = np.asarray(bytearray(bg_file.read()), dtype=np.uint8)
        cur_bytes = np.asarray(bytearray(cur_file.read()), dtype=np.uint8)

        background = cv2.imdecode(bg_bytes, cv2.IMREAD_COLOR)
        current = cv2.imdecode(cur_bytes, cv2.IMREAD_COLOR)

        # Ki·ªÉm tra l·ªói ƒë·ªçc ·∫£nh
        if background is None or current is None:
            raise ValueError(
                "Kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c ·∫£nh. Ki·ªÉm tra ƒë·ªãnh d·∫°ng ho·∫∑c n·ªôi dung file."
            )

        # Resize ·∫£nh current ƒë·ªÉ kh·ªõp k√≠ch th∆∞·ªõc background
        h_bg, w_bg = background.shape[:2]
        current = cv2.resize(current, (w_bg, h_bg))

        # Chuy·ªÉn sang grayscale
        gray_bg = cv2.cvtColor(background, cv2.COLOR_BGR2GRAY)
        gray_current = cv2.cvtColor(current, cv2.COLOR_BGR2GRAY)

        # Ng∆∞·ª°ng ƒëi·ªÅu ch·ªânh
        threshold_value = st.slider("üîß Ng∆∞·ª°ng t√°ch n·ªÅn", 0, 100, 50)

        # T·∫°o mask v·∫≠t th·ªÉ b·∫±ng subtraction
        diff = cv2.absdiff(gray_bg, gray_current)
        _, mask = cv2.threshold(diff, threshold_value, 255, cv2.THRESH_BINARY)

        # X·ª≠ l√Ω mask ƒë·ªÉ l√†m r√µ v·∫≠t th·ªÉ
        mask = cv2.GaussianBlur(mask, (9, 9), 0)
        kernel = np.ones((5, 5), np.uint8)
        mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)
        mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)
        mask = cv2.dilate(mask, kernel, iterations=2)

        # T·∫°o mask m√†u 3 k√™nh v√† t√°ch v·∫≠t th·ªÉ
        mask_3ch = cv2.merge([mask] * 3)
        foreground_only = cv2.bitwise_and(current, mask_3ch)

        # L·∫•y ph·∫ßn foreground (v·∫≠t th·ªÉ)
        foreground = cv2.bitwise_and(current, cv2.merge([mask] * 3))

        # L·∫•y ph·∫ßn background kh√¥ng c√≥ v·∫≠t th·ªÉ
        inv_mask = cv2.bitwise_not(mask)
        background_part = cv2.bitwise_and(background, cv2.merge([inv_mask] * 3))

        # Gh√©p: v·∫≠t th·ªÉ ƒë·∫∑t l√™n background
        final = cv2.add(background_part, foreground)

        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        st.success("‚úÖ ƒê√£ x·ª≠ l√Ω xong ·∫£nh:")
        col1, col2 = st.columns(2)
        with col1:
            st.image(
                cv2.cvtColor(background, cv2.COLOR_BGR2RGB),
                caption="·∫¢nh n·ªÅn",
            )
            st.image(
                mask,
                caption="Mask t√°ch n·ªÅn",
            )
        with col2:
            st.image(
                cv2.cvtColor(current, cv2.COLOR_BGR2RGB),
                caption="·∫¢nh c√≥ v·∫≠t th·ªÉ",
            )
            st.image(
                cv2.cvtColor(final, cv2.COLOR_BGR2RGB),
                caption="K·∫øt qu·∫£ gh√©p ·∫£nh",
            )

    except Exception as e:
        st.error(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω ·∫£nh: `{e}`")

else:
    st.info("üëà Vui l√≤ng t·∫£i l√™n c·∫£ hai ·∫£nh.")
