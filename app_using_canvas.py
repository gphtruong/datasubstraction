import cv2
import numpy as np
import streamlit as st
from PIL import Image
from streamlit_drawable_canvas import st_canvas

st.set_page_config(page_title="T√°ch n·ªÅn & Gh√©p ·∫£nh", layout="centered")
st.title("üì∏ T√°ch n·ªÅn & Gh√©p v·∫≠t th·ªÉ v√†o n·ªÅn")

# === Upload ·∫£nh
st.subheader("üì§ T·∫£i ·∫£nh l√™n")
bg_file = st.file_uploader("·∫¢nh n·ªÅn (bg_img)", type=["jpg", "jpeg", "png"])
obj_file = st.file_uploader("·∫¢nh c√≥ v·∫≠t th·ªÉ (obj_img)", type=["jpg", "jpeg", "png"])

if bg_file and obj_file:
    try:
        # ƒê·ªçc ·∫£nh t·ª´ file buffer
        obj_bytes = np.frombuffer(obj_file.read(), np.uint8)
        bg_bytes = np.frombuffer(bg_file.read(), np.uint8)

        obj_img = cv2.imdecode(obj_bytes, cv2.IMREAD_COLOR)
        bg_img = cv2.imdecode(bg_bytes, cv2.IMREAD_COLOR)

        # Ki·ªÉm tra l·ªói ƒë·ªçc ·∫£nh
        if obj_img is None:
            st.error(
                "‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c **·∫¢nh c√≥ v·∫≠t th·ªÉ**. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng ho·∫∑c n·ªôi dung file."
            )
            st.stop()
        if bg_img is None:
            st.error(
                "‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c **·∫¢nh n·ªÅn**. Vui l√≤ng ki·ªÉm tra ƒë·ªãnh d·∫°ng ho·∫∑c n·ªôi dung file."
            )
            st.stop()

        # Resize background ƒë·ªÉ kh·ªõp v·ªõi ·∫£nh object
        obj_h, obj_w = obj_img.shape[:2]
        bg_img = cv2.resize(bg_img, (obj_w, obj_h))

        st.info("üñ± **H∆∞·ªõng d·∫´n:** V·∫Ω m·ªôt ƒë∆∞·ªùng bao quanh v·∫≠t th·ªÉ c·∫ßn t√°ch b·∫±ng chu·ªôt.")

        # Chuy·ªÉn ·∫£nh sang PIL ƒë·ªÉ d√πng cho canvas
        # Streamlit-drawable-canvas ho·∫°t ƒë·ªông t·ªët nh·∫•t v·ªõi PIL Image
        obj_pil = Image.fromarray(cv2.cvtColor(obj_img, cv2.COLOR_BGR2RGB))
        obj_pil_width, obj_pil_height = obj_pil.size
        # Canvas ƒë·ªÉ v·∫Ω v√πng ch·ªçn
        canvas_result = st_canvas(
            fill_color="rgba(255, 255, 255, 0.3)",  # M√†u fill c·ªßa v√πng v·∫Ω
            stroke_width=5,  # ƒê·ªô d√†y n√©t v·∫Ω
            stroke_color="#FFFFFF",  # M√†u n√©t v·∫Ω (tr·∫Øng ƒë·ªÉ d·ªÖ th·∫•y tr√™n m·ªçi n·ªÅn)
            background_image=obj_pil,
            update_streamlit=True,  # C·∫≠p nh·∫≠t Streamlit khi v·∫Ω
            height=obj_pil_height,
            width=obj_pil_width,
            drawing_mode="freedraw",  # Ch·∫ø ƒë·ªô v·∫Ω tay t·ª± do
            key="canvas",
        )

        # N·∫øu c√≥ d·ªØ li·ªáu ·∫£nh v·∫Ω t·ª´ canvas
        if canvas_result.image_data is not None:
            # L·∫•y k√™nh alpha t·ª´ d·ªØ li·ªáu canvas ƒë·ªÉ t·∫°o mask
            # K√™nh alpha ch·ª©a th√¥ng tin v·ªÅ ƒë·ªô trong su·ªët/v√πng ƒë√£ v·∫Ω
            alpha_channel = canvas_result.image_data[:, :, 3]

            # T·∫°o mask nh·ªã ph√¢n t·ª´ k√™nh alpha. Ng∆∞·ª°ng 0 s·∫Ω l·∫•y t·∫•t c·∫£ c√°c pixel c√≥ gi√° tr·ªã alpha > 0
            # ƒêi·ªÅu n√†y gi√∫p ƒë·∫£m b·∫£o m·ªçi ph·∫ßn v·∫Ω ƒë·ªÅu ƒë∆∞·ª£c ƒë∆∞a v√†o mask
            mask = cv2.threshold(alpha_channel, 0, 255, cv2.THRESH_BINARY)[1].astype(
                np.uint8
            )

            # T√¨m contours ƒë·ªÉ fill v√πng b√™n trong n√©t v·∫Ω
            contours, _ = cv2.findContours(
                mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE
            )

            # T·∫°o mask tr·∫Øng ho√†n to√†n v·ªõi v√πng v·∫Ω ƒë∆∞·ª£c fill k√≠n
            filled_mask = np.zeros_like(mask)
            cv2.fillPoly(filled_mask, contours, 255)

            # X·ª≠ l√Ω mask ƒë·ªÉ l√†m s·∫°ch v√† l√†m ƒë·∫ßy
            # Kernel cho c√°c ph√©p to√°n h√¨nh th√°i h·ªçc
            kernel = np.ones((5, 5), np.uint8)

            # Morphological CLOSE: ƒê√≥ng c√°c l·ªó nh·ªè b√™n trong v√πng v·∫Ω v√† l√†m li·ªÅn c√°c v√πng g·∫ßn nhau
            filled_mask = cv2.morphologyEx(
                filled_mask, cv2.MORPH_CLOSE, kernel, iterations=2
            )
            # Dilate: L√†m d√†y mask ƒë·ªÉ ƒë·∫£m b·∫£o v·∫≠t th·ªÉ ƒë∆∞·ª£c bao ph·ªß ho√†n to√†n
            filled_mask = cv2.dilate(filled_mask, kernel, iterations=1)

            # T√°ch v·∫≠t th·ªÉ t·ª´ ·∫£nh g·ªëc b·∫±ng mask
            object_only = cv2.bitwise_and(obj_img, obj_img, mask=filled_mask)

            # T·∫°o ph·∫ßn n·ªÅn m·ªõi: s·ª≠ d·ª•ng ·∫£nh n·ªÅn v√† lo·∫°i b·ªè v√πng v·∫≠t th·ªÉ
            mask_inv = cv2.bitwise_not(filled_mask)
            bg_part = cv2.bitwise_and(bg_img, bg_img, mask=mask_inv)

            # Gh√©p v·∫≠t th·ªÉ ƒë√£ t√°ch v√†o ph·∫ßn n·ªÅn m·ªõi
            final = cv2.add(object_only, bg_part)

            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            st.success("‚úÖ ƒê√£ x·ª≠ l√Ω xong ·∫£nh:")
            col1, col2 = st.columns(2)
            with col1:
                st.image(
                    cv2.cvtColor(bg_img, cv2.COLOR_BGR2RGB), caption="·∫¢nh n·ªÅn ƒë√£ resize"
                )
                st.image(mask, caption="Mask t√°ch v·∫≠t th·ªÉ")
            with col2:
                st.image(
                    cv2.cvtColor(obj_img, cv2.COLOR_BGR2RGB),
                    caption="·∫¢nh c√≥ v·∫≠t th·ªÉ g·ªëc",
                )
                st.image(
                    cv2.cvtColor(final, cv2.COLOR_BGR2RGB), caption="K·∫øt qu·∫£ gh√©p ·∫£nh"
                )

        else:
            st.warning(
                "üëâ Vui l√≤ng v·∫Ω v√πng ch·ª©a v·∫≠t th·ªÉ tr√™n ·∫£nh **·∫¢nh c√≥ v·∫≠t th·ªÉ** ƒë·ªÉ b·∫Øt ƒë·∫ßu x·ª≠ l√Ω."
            )

    except Exception as e:
        st.error(f"‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω ·∫£nh: `{e}`")
        st.exception(e)  # Hi·ªÉn th·ªã stack trace ƒë·ªÉ debug chi ti·∫øt h∆°n

else:
    st.info("üëà Vui l√≤ng t·∫£i l√™n c·∫£ hai ·∫£nh (·∫¢nh n·ªÅn v√† ·∫¢nh c√≥ v·∫≠t th·ªÉ) ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
